# This workflow automatically creates a release PR for the CI integration.

name: Create Release PR

env:
  GIT_AUTHOR_EMAIL: 'packages@datadoghq.com'
  GIT_AUTHOR_NAME: 'ci.datadog-ci'

on:
  workflow_dispatch:
    inputs:
      semver:
        description: 'Semver argument for the version bump to do on the CI integration'
        default: 'minor'
        type: choice
        options:
          - 'minor'

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      # Do the changes
      - name: Get GitHub App token
        id: get-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.RELEASE_AUTOMATION_GITHUB_APP_ID }}
          private_key: ${{ secrets.RELEASE_AUTOMATION_GITHUB_APP_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ steps.get-token.outputs.token }}
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Create release branch
        run: git checkout -b local-branch
      - name: Set git user
        run: |
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"
      - name: Install dependencies
        run: yarn install
      - name: Bump CI integration version
        # The `version` command only bumps the version in package.json. It doesn't commit nor tag.
        run: yarn version ${{ github.event.inputs.semver }}
      - name: Update build files
        run: yarn build && yarn package
      - name: Commit new version
        id: commit-new-version
        run: |
          VERSION_TAG="v$(jq -r '.version' package.json)" # e.g. v1.1.0
          git add --all
          git commit -m $VERSION_TAG
          git tag $VERSION_TAG
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_OUTPUT
      - name: Push the branch (with tags)
        run: git push --follow-tags -u origin local-branch:release/${{ steps.commit-new-version.outputs.VERSION_TAG }}

      # Create the pull request
      - name: Generate release notes
        id: generate-release-notes
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get-token.outputs.token }}
          script: |
            const { data: releaseNotes } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.commit-new-version.outputs.VERSION_TAG }}',
            })

            core.setOutput('RELEASE_NOTES', releaseNotes.body)
      - name: Create pull request
        id: create-pull-request
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get-token.outputs.token }}
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'main',
              head: 'release/${{ steps.commit-new-version.outputs.VERSION_TAG }}',
              title: '[release:${{ github.event.inputs.semver }}] `${{ steps.commit-new-version.outputs.VERSION_TAG }}`',
              body: ${{ toJSON(steps.generate-release-notes.outputs.RELEASE_NOTES) }}
            })

            core.setOutput('PULL_REQUEST_NUMBER', pullRequest.number)
      - name: Create comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get-token.outputs.token }}
          script: |
            const { releaseVersionComment } = require('./ci/pull-request-comments')

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.create-pull-request.outputs.PULL_REQUEST_NUMBER }},
              body: releaseVersionComment,
            })
